<Project Sdk="Microsoft.NET.Sdk">
  <!-- This is a smaller build of Microsoft.NET.Build.Tasks to be used outside
       of SDK projects -->

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <PackageId>Microsoft.NET.Build.Extensions</PackageId>
    <Description>The MSBuild targets and tasks which extend MSBuild's common targets.</Description>
    <RootNamespace>Microsoft.NET.Build.Tasks</RootNamespace>
    <TargetFrameworks>netcoreapp1.0;net46</TargetFrameworks>
    <TargetFrameworks Condition="'$(OS)' != 'Windows_NT'">netcoreapp1.0</TargetFrameworks>
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <PackageOutputPath>$(OutputPath)Packages\</PackageOutputPath>
    <PackageLayoutOutputPath>$(OutputPath)Sdks\$(PackageId)\</PackageLayoutOutputPath>
    <OutputPath>$(PackageLayoutOutputPath)msbuildExtensions\Microsoft\Microsoft.NET.Build.Extensions\tools</OutputPath>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <EnableDefaultItems>false</EnableDefaultItems>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <DefineConstants>$(DefineConstants);EXTENSIONS</DefineConstants>
    <NETStandardLibraryNetFrameworkPath>$(NUGET_PACKAGES)\NETStandard.Library.NETFramework\$(NETStandardLibraryNETFrameworkVersion)\build</NETStandardLibraryNetFrameworkPath>
    <NSNetFxTargetsTemplate>msbuildExtensions\Microsoft\Microsoft.NET.Build.Extensions\Microsoft.NET.Build.Extensions.NETFramework.targets</NSNetFxTargetsTemplate>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <PackageReference>
      <PrivateAssets>All</PrivateAssets>
      <Publish>true</Publish>
    </PackageReference>
  </ItemDefinitionGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" Version="$(MsBuildPackagesVersion)" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="$(MsBuildPackagesVersion)" ExcludeAssets="Runtime" />
    <PackageReference Include="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" Condition=" '$(TargetFramework)' == 'netcoreapp1.0' " />
    <PackageReference Include="System.Diagnostics.FileVersionInfo" Version="4.0.0" Condition=" '$(TargetFramework)' == 'netcoreapp1.0' " />
    <PackageReference Include="XliffTasks" Version="$(XliffTasksVersion)" />
  </ItemGroup>

  <ItemGroup>
    <!-- don't reference MS.NET.Build.Tasks, but make sure it builds before this project -->
    <ProjectReference Include="..\Microsoft.NET.Build.Tasks\Microsoft.NET.Build.Tasks.csproj" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <None Include="msbuildExtensions\**\*" Exclude="$(NSNetFxTargetsTemplate)" PackagePath="msbuildExtensions\" />
    <None Include="msbuildExtensions-ver\**\*" PackagePath="msbuildExtensions-ver\" />
    <Compile Include="**\*.cs" />
    <Compile Include="..\Common\src\**\*.cs">
      <Link>Common\%(RecursiveDir)\%(FileName)%(Extension)</Link>
    </Compile>
    <None Include="..\Common\Resources\xlf\**\*">
      <Link>Resources\xlf\%(FileName)%(Extension)</Link>
    </None>
    <EmbeddedResource Include="..\Common\Resources\Strings.resx">
      <Link>Resources\%(FileName)%(Extension)</Link>
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Strings.Designer.cs</LastGenOutput>
      <CustomToolNamespace>Microsoft.NET.Build.Tasks</CustomToolNamespace>
    </EmbeddedResource>
    <Compile Include="..\Common\Resources\Strings.Designer.cs">
      <Link>Resources\%(FileName)%(Extension)</Link>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Strings.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <Target Name="PrepareAdditionalFilesToLayout" BeforeTargets="AssignTargetPaths">
    <ItemGroup>
      <LayoutFile Include="@(None)" Condition="'%(None.PackagePath)' != ''">
        <TargetPath>%(None.PackagePath)\%(None.RecursiveDir)%(None.Filename)%(None.Extension)</TargetPath>
      </LayoutFile>
      <NetStandardNetFxFile Include="$(NETStandardLibraryNetFrameworkPath)\**\*" Exclude="$(NETStandardLibraryNetFrameworkPath)\**\*.props;$(NETStandardLibraryNetFrameworkPath)\**\*.targets" />
      <LayoutFile Include="@(NetStandardNetFxFile)">
        <TargetPath>msbuildExtensions\Microsoft\Microsoft.NET.Build.Extensions\%(NetStandardNetFxFile.RecursiveDir)%(NetStandardNetFxFile.FileName)%(NetStandardNetFxFile.Extension)</TargetPath>
      </LayoutFile>
    </ItemGroup>
  </Target>

  <Target Name="CopyAdditionalFilesToLayout" Condition="'$(TargetFramework)' == ''" DependsOnTargets="PrepareAdditionalFilesToLayout" AfterTargets="Build" Inputs="@(LayoutFile)" Outputs="@(LayoutFile->'$(PackageLayoutOutputPath)%(TargetPath)')">
    <Copy SourceFiles="@(LayoutFile)" DestinationFiles="@(LayoutFile->'$(PackageLayoutOutputPath)%(TargetPath)')">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>
  </Target>

  <ItemGroup>
    <_net47Files Include="$(NETStandardLibraryNetFrameworkPath)\net47\lib\*.dll" />
    <_net462Files Include="$(NETStandardLibraryNetFrameworkPath)\net462\lib\*.dll" />
    <_net461Files Include="$(NETStandardLibraryNetFrameworkPath)\net461\lib\*.dll" />
  </ItemGroup>
  <Target Name="StampNSNetFxFileListInTargets" 
          Condition="'$(TargetFramework)' == ''" 
          AfterTargets="Build" 
          Inputs="$(NSNetFxTargetsTemplate);@(_net47Files);@(_net462Files);@(_net461Files);$(MSBuildProjectFile)" 
          Outputs="$(PackageLayoutOutputPath)\$(NSNetFxTargetsTemplate)">
    <PropertyGroup>
      <_net47FileNames>@(_net47Files->'%(FileName)')</_net47FileNames>
      <_net462FileNames>@(_net462Files->'%(FileName)')</_net462FileNames>
      <_net461FileNames>@(_net461Files->'%(FileName)')</_net461FileNames>
    </PropertyGroup>
    <Error Condition="'$(_net47FileNames)' == '' OR '$(_net462FileNames)' == '' OR '$(_net461FileNames)' == ''" Text="Could not determine file list from NETStandard.Library.NETFramework." />

    <WriteLinesToFile File="$(PackageLayoutOutputPath)\$(NSNetFxTargetsTemplate)"
                      Lines="$([System.IO.File]::ReadAllText('$(NSNetFxTargetsTemplate)').Replace('#NSNETFX47FILENAMES#', '$(_net47FileNames)').Replace('#NSNETFX462FILENAMES#', '$(_net462FileNames)').Replace('#NSNETFX461FILENAMES#', '$(_net461FileNames)'))"
                      Overwrite="true" />
    
  </Target>

  <Target Name="PackLayout" DependsOnTargets="CopyAdditionalFilesToLayout;StampNSNetFxFileListInTargets" BeforeTargets="$(GenerateNuspecDependsOn)">
    <ItemGroup>
      <Content Include="$(PackageLayoutOutputPath)**\*" Exclude="$(PackageLayoutOutputPath)**\*.pdb" PackagePath="\" />
    </ItemGroup>
  </Target>

  <!-- Remove files from copy local that would not be published as they are provided by the platform package -->
  <!-- https://github.com/dotnet/sdk/issues/933 tracks a first class feature for this -->
  <Target Name="FilterCopyLocal" DependsOnTargets="RunResolvePublishAssemblies" BeforeTargets="ResolveLockFileCopyLocalProjectDeps">
    <ItemGroup>
      <_CopyLocalButNotPublished Include="@(AllCopyLocalItems)" Exclude="@(ResolvedAssembliesToPublish)" />
      <AllCopyLocalItems Remove="@(_CopyLocalButNotPublished)" />
    </ItemGroup>
  </Target>
  <Import Project="..\..\..\build\Targets\Signing.Imports.targets" />

</Project>
